#!/usr/bin/env ruby

require 'lyv'
require 'thor'

module Lyv

  # tasks executed by subcommands
  class LyvCLI < Thor

    class_option :verbose, :type => :boolean, :desc => "Run verbose", :aliases => :v

    #
    # list
    #

    desc('list [FILE1 [FILE2 [...]]]',
         'lists scores contained in the file(s)')

    option(:order, :type => :string, :banner => 'file|alphabetic', :default => 'alphabetic')

    option(:id, :type => :boolean, :aliases => :i,
           :desc => 'print id')
    option(:field,
           :desc => 'print contents of the given header field')
    option(:filename, :type => :boolean, :aliases => :f, :default => true,
           :desc => 'print file name')

    option(:lyrics, :type => :boolean, :aliases => :l, :default => true,
           :desc => 'print lyrics')
    option(:'lyrics-shorten', :type => :numeric, :default => -1,
           :desc => 'print whole words not longer than N characters')
    option(:music,
           :desc => 'print music source')
    option(:'music-shorten', :type => :numeric, :default => -1,
           :desc => 'print incipit not longer than N notes')

    def list(*paths)

    end

    #
    # split
    #

    desc('split [FILE1 [FILE2 [...]]]',
         'splits lilypond file(s) to a set of files containing separate scores')

    option(:'ids', :type => :boolean, :aliases => :i,
           :desc => "Instead of numbering the produced files, use property 'id' of each score")
    option(:'output-dir', :aliases => :d, 
           :desc => 'directory to place the created chunks')
    option(:'remove-headers', :aliases => :H, 
           :desc => "Remove header from each score")
    option(:'prepend-text', :banner => 'TEXT',
           :desc => "Text to be printed at the beginning of each file with a score")
    option(:'insert-text', :banner => 'TEXT',
           :desc => "Text to be inserted before the score's closing brace")

    # very specific for the In adiutorium project
    option(:'mode-info', :aliases => :m,
           :desc => "Puts contents of properties quid, modus and differentia in front of the piece")

    def split(*paths)
      splitter = MusicSplitter.new options
      paths.each {|p| splitter.split p }
    end

    #
    # lenghtcheck
    #

    desc('lengthcheck [FILE1 [FILE2 [...]]]',
         'lists scores where lenght of the music doesn\'t match lyrics\' lenght')

    option(:source, :type => :boolean, :aliases => :s,
           :desc => "Print full source of each score with detected defect.")
    option(:no_empty, :type => :boolean, :aliases => :e, :default => false,
           :desc => "Print scores where music or lyrics is empty?")
    option(:lilypond, :type => :boolean, :aliases => :l,
           :desc => "Print reports as lilypond markup")

    def lengthcheck(*paths)
      checker = LengthChecker.new
      paths.each do |p|
        heading_printed = false
        LilyPondMusic.new(p).scores.each do |score|
          r = checker.check score
          if r.is_a? Array then
            if options[:no_empty] then
              if r.include? 0 then
                next
              end
            end

            unless heading_printed
              heading = p
              if options[:lilypond] then
                heading = '\markup\bold{ '+heading+' }'
              end
              puts heading
              heading_printed = true
              puts if options[:score]
            end

            report = r.join(':').ljust(7) + ' ' + score.to_s
            if options[:lilypond] then
              report = '\markup{ "'+report+'" }'
            end
            puts(report)

            if options[:source] then
              puts
              puts score.text
              puts
            end
          end
        end
      end
    end
  end
end

if File.basename($0) == File.basename(__FILE__) then
  Lyv::LyvCLI.start(ARGV)
end

# Local Variables:
# mode: ruby
# End: 
